package org.ks.viergewinnt.card;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.enterprise.event.Event;
import javax.inject.Inject;
import javax.inject.Singleton;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import org.ks.viergewinnt.GameConstants;
import org.ks.viergewinnt.GameManager;
import org.ks.viergewinnt.Main;
import org.ks.viergewinnt.VierGewinntMove;
import org.ks.viergewinnt.card.ui.Chip;

/**
 *
 * @author Kevin Sapper
 */
@Singleton
public class GameCard extends javax.swing.JPanel implements MouseListener {

    @Inject
    private GameManager manager;

    @Inject
    private Event<Chip> refreshEvent;
    
    @Inject
    private Event<String> finishEvent;

    /**
     * Creates new form GamePanel
     */
    public GameCard() {
        this.setLayout(new GridLayout(GameConstants.ROWS, GameConstants.COLUMNS));

        setBackground(Color.BLUE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();

        jCheckBox1.setText("jCheckBox1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jCheckBox1)
                .addContainerGap(472, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jCheckBox1)
                .addContainerGap(287, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables

    public void refreshGameObjects() {
        this.removeAll();
        for (byte i = 0; i < GameConstants.ROWS; i++) {
            for (byte j = 0; j < GameConstants.COLUMNS; j++) {
                byte field = manager.getBoard()[j][i];
                if (field == 0) {
                    this.add(Chip.newInstanceNoPlayer(this, j));
                } else if (field == 1) {
                    this.add(Chip.newInstancePlayer1(this, j));
                } else {
                    this.add(Chip.newInstancePlayer2(this, j));
                }
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        //do noting
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //do noting
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
            for (VierGewinntMove vierGewinntMove : manager.moves()) {
                Chip chip = (Chip) e.getComponent();
                if (chip.getColumn() == vierGewinntMove.getColumn()) {
                    manager.doMove(vierGewinntMove);
                    refreshGameObjects();
                    refreshEvent.fire(chip);
                    if (manager.lastHasWon()) {
                        finishEvent.fire(manager.isFirstPLayer() ? "Player 1" : "Player 2");
                    }
                }
            }
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //do noting
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //do noting
    }
}
